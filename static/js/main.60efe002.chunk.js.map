{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedFilter","todos","this","props","filter","todo","title","includes","completed","className","htmlFor","value","id","placeholder","onChange","event","setState","target","map","todoClasses","classNames","TodoList__item","key","type","checked","readOnly","onComplete","onClick","onUserSelect","userId","React","Component","getUserById","fetch","then","response","json","CurrentUser","user","userFromServer","data","prevProps","onUserClear","name","email","phone","defaultProps","App","selectedUserId","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60efe002.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedFilter: 'All',\n  }\n\n  render() {\n    let { todos } = this.props;\n    const { query, selectedFilter } = this.state;\n\n    todos = todos\n      .filter(todo => todo.title.includes(query))\n      .filter((todo) => {\n        if (selectedFilter === 'Active') {\n          return !todo.completed;\n        }\n\n        if (selectedFilter === 'Completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label htmlFor=\"todoInput\">\n          Todo title:&nbsp;\n          <input\n            value={query}\n            id=\"todoInput\"\n            placeholder=\"Input a title of todo\"\n            onChange={event => this.setState({ query: event.target.value })}\n          />\n        </label>\n\n        <select\n          value={selectedFilter}\n          onChange={event => (\n            this.setState({ selectedFilter: event.target.value })\n          )}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map((todo) => {\n              const todoClasses = classNames({\n                TodoList__item: true,\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              });\n\n              return (\n                <li\n                  key={todo.id}\n                  className={todoClasses}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                      onChange={() => this.props.onComplete(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => this.props.onUserSelect(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape().isRequired,\n  ).isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n};\n","export function getAllTodos() {\n  return fetch('https://mate-api.herokuapp.com/todos')\n    .then(response => response.json());\n}\n\nexport function getUserById(id) {\n  return fetch(`https://mate-api.herokuapp.com/users/${id}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUserById(this.props.userId)\n      .then(userFromServer => (\n        this.setState({\n          user: userFromServer.data,\n        })\n      ));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUserById(this.props.userId)\n        .then(userFromServer => (\n          this.setState({\n            user: userFromServer.data,\n          })\n        ));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onUserClear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user: &nbsp;\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={onUserClear}\n          className=\"CurrentUser__clear button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  onUserClear: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getAllTodos();\n\n    this.setState({\n      todos: todosFromServer.data.filter(todo => todo.title && todo.userId),\n    });\n  }\n\n  onComplete = (id) => {\n    this.setState((state) => {\n      const todos = state.todos.map((todo) => {\n        if (todo.id === id) {\n          const changedTodo = {\n            ...todo,\n            completed: !todo.completed,\n          };\n\n          return changedTodo;\n        }\n\n        return todo;\n      });\n\n      return {\n        todos,\n      };\n    });\n  }\n\n  onUserSelect = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  onUserClear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onComplete={this.onComplete}\n            onUserSelect={this.onUserSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onUserClear={this.onUserClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}